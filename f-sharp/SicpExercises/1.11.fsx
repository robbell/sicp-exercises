// Exercise 1.11

// Recursive process

let rec f n =
    if n < 3 then n
    else f(n - 1) + (f(n - 2) * 2) + (f(n - 3) * 3)

f 5

// f(3)
// (f(3-1) + f(3-2) * 2 + f(3-3) * 3)
// (f(2) + f(1) * 2 + f(0) * 3)
// (2 + 1 * 2 + 0 * 3)
// (2 + 2 + 0)
// 4

// f(4)
// (f(4-1) + f(4-2) * 2 + f(4-3) * 3)
// (f(3) + f(2) * 2 + f(1) * 3)
// ((f(3 - 1) + f(3 - 2) * 2 + f(3 - 3) * 3) + f(2) * 2 + f(1) * 3)
// ((f(3 - 1) + f(3 - 2) * 2 + f(3 - 3) * 3) + 2 * 2 + 1 * 3)
// ((f(3 - 1) + f(3 - 2) * 2 + f(3 - 3) * 3) + 4 + 3)
// ((f(2) + f(1) * 2 + f(0) * 3) + 4 + 3)
// ((2 + 2 + 0) + 4 + 3)
// (4 + 7)
// 11

// Iterative process

let rec f2Iter a b c count = 
    if count < 3 then a
    else f2Iter (a + (b * 2) + (c * 3)) 
                a 
                b 
                (count - 1)

let f2 n = 
    if n < 3 then n
    else f2Iter 2 1 0 n

f2 4

// f2(3)
// f2Iter(2 1 0 3)
// f2Iter((2 + (1 * 2) + (0 * 3)) 2 1 (3 - 1))
// f2Iter((2 + 2 + 0) 2 1 2)
// f2Iter(4 2 1 2)
// 4

// f2(4)
// f2Iter(2 1 0 4)
// f2Iter((2 + (1 * 2) + (0 * 3)) 2 1 (4 - 1))
// f2Iter((2 + 2 + 0) 2 1 3)
// f2Iter(4 2 1 3)
// f2Iter((4 + (2 * 2) + (1 * 3)) 2 1 (3 - 1))
// f2Iter((4 + 4 + 3) 2 1 2)
// f2Iter(11 2 1 2)
// 11
